/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface Ku4Carousel {
        /**
          * Display the next ku4-carousel-slide
         */
        "next": () => Promise<this>;
        /**
          * Display the previous ku4-carousel-slide
         */
        "previous": () => Promise<this>;
        /**
          * Sets the distance a touch must travel before activating a swipe.
         */
        "swipeTolerance": number;
    }
    interface Ku4CarouselSlide {
        /**
          * Set this slide to active.
         */
        "activate": () => Promise<void>;
        /**
          * Set this slide to inactive.
         */
        "deactivate": () => Promise<void>;
        /**
          * Move this slide in to view.
          * @param direction - Direction to move.
         */
        "slideIn": (direction: 'prev' | 'next') => Promise<void>;
        /**
          * Move this slide out of view.
          * @param direction - Direction to move.
         */
        "slideOut": (direction: 'prev' | 'next') => Promise<void>;
    }
    interface Ku4Col {
        /**
          * Order of column at large (optional).
         */
        "orderLg": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Order of column at medium (optional).
         */
        "orderMd": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Order of column at small (optional).
         */
        "orderSm": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Order of column at extra-small (optional).
         */
        "orderXs": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Number of columns to span left and right at large (optional).
         */
        "spanLg": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Number of columns to span left and right at medium (optional).
         */
        "spanMd": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Number of columns to span left and right at extra-small (optional).
         */
        "spanSm": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Number of columns to span left and right at extra-small (optional).
         */
        "spanXs": 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Start position of column at large (optional).
         */
        "startLg": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Start position of column at medium (optional).
         */
        "startMd": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Start position of column at small (optional).
         */
        "startSm": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Start position of column at extra-small (optional).
         */
        "startXs": 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
    }
    interface Ku4Drawer {
        /**
          * Pin drawer to bottom
         */
        "bottom": boolean;
        /**
          * Pin drawer to left
         */
        "left": boolean;
        /**
          * Display drawer
         */
        "open": boolean;
        /**
          * Pin drawer to right
         */
        "right": boolean;
        /**
          * Open size of this drawer (any valid CSS width or height value)
         */
        "size": string;
        /**
          * Toggle drawer
         */
        "toggle": () => Promise<void>;
        /**
          * Pin drawer to top
         */
        "top": boolean;
    }
    interface Ku4FocusTrap {
        /**
          * Activate focus trap
          * @param element - Element to return focus to when trap is deactivated.
         */
        "activate": (element?: any) => Promise<void>;
        /**
          * Focus trap will be active when true.
         */
        "active": boolean;
        /**
          * Deactivate focus trap.
         */
        "deactivate": () => Promise<void>;
        /**
          * A querySelector of elements to explicitly exclude. This can be useful for greedy accessibility apis and screen reader fallover. Pass a comma delimited string of multiple selectors to target multiple exclusions.
         */
        "exclude": string;
        /**
          * A querySelector of shadow elements to explicitly exclude. This can be useful for greedy accessibility apis and screen reader fallover. Pass a comma delimited string of multiple selectors to target multiple exclusions. Pass selectors that starts with the target components host lightDom element E.g. `'ku4-carousel .next, ku4-carousel .prev'` will explicitly exclude the target ku4-carousel next and previous buttons from being navigable by greedy accessibility tools, i.e. VoiceOver.
         */
        "excludeShadow": string;
        /**
          * A querySelector of elements to include in the trap that are not children of this focus trap. This can be useful for specific situations such as modal overlays.
         */
        "include": string;
        /**
          * A querySelector of element to initially focus
         */
        "initial": string;
        /**
          * A querySelector of element to return focus to
         */
        "return": string;
    }
    interface Ku4Form {
        /**
          * Set to true to display as invalid
         */
        "invalid": boolean;
        /**
          * A string of the name of the field to invalidate
          * @param name
         */
        "invalidate": (name: any) => Promise<this>;
        /**
          * Reads data from the associated form
         */
        "read": () => Promise<any>;
        /**
          * Validates this form. This method is automatically called internally on submit of the form only allowing a successful submit if the form  is valid.
         */
        "validate": () => Promise<any>;
        /**
          * Writes data to the associated form
         */
        "write": (data: any) => Promise<this>;
    }
    interface Ku4Grid {
        /**
          * Number of columns to render at large (optional).
         */
        "columnsLg"?: 1 | 2 | 3 | 4 | 6 | 8 | 12 | 16;
        /**
          * Number of columns to render at medium (optional).
         */
        "columnsMd"?: 1 | 2 | 3 | 4 | 6 | 8 | 12 | 16;
        /**
          * Number of columns to render at small (optional).
         */
        "columnsSm"?: 1 | 2 | 3 | 4 | 6 | 8 | 12 | 16;
        /**
          * Number of columns to render at extra-small (optional).
         */
        "columnsXs"?: 1 | 2 | 3 | 4 | 6 | 8 | 12 | 16;
        /**
          * Number of columns to offset at large (optional).
         */
        "offsetLeftLg"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left at medium (optional).
         */
        "offsetLeftMd"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left at small (optional).
         */
        "offsetLeftSm"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left at extra-small (optional).
         */
        "offsetLeftXs"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left and right at large (optional).
         */
        "offsetLg"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left and right at medium (optional).
         */
        "offsetMd"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset right (optional).
         */
        "offsetRight"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset right at large (optional).
         */
        "offsetRightLg"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset right at medium (optional).
         */
        "offsetRightMd"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset right at small (optional).
         */
        "offsetRightSm"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset at extra-small (optional).
         */
        "offsetRightXs"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left and right at small (optional).
         */
        "offsetSm"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left and right at extra-small (optional).
         */
        "offsetXs"?: 0 | 1 | 2 | 3 | 4 | 5;
    }
    interface Ku4Label {
        /**
          * The value of the id attribute of the input that this is the label for.
         */
        "for": string;
        /**
          * Optional Label value. This value is driven by the input placeholder attribute by default.
         */
        "value": string;
    }
    interface Ku4Mask {
        /**
          * A regex of characters to ban from entry. A user will not be able to input any character in this set of characters. E.g. ban="[()-]" will not allow a user to input (, ), or - into the target input.
         */
        "ban": string;
        /**
          * Mask Character
         */
        "char": string;
        /**
          * Mask for input having id of value
         */
        "for": string;
        /**
          * Hide mask
         */
        "hidden": boolean;
        /**
          * A test pattern for the mask to allow or disallow characters at targeted points in the input. The pattern is a character separated value of regular expressions where the first character denotes the character separator at each subsequent value is a regular expression for the character at that indicated index. E.g. `pattern=",[345],,,[^abc]"` would mean that "," is the separator and that the first character must  be a 3, 4, or 5, and the fourth character cannot be an a, b or c.
         */
        "pattern": string;
        /**
          * Mask template
         */
        "template": string;
    }
    interface Ku4Modal {
        /**
          * Dismiss modal
         */
        "dismiss": () => Promise<void>;
        /**
          * Display modal
         */
        "display": () => Promise<void>;
        /**
          * An optional querySelector of an associated ku4-focus-trap that should be activated when this ku4-modal is displayed and deactivated when this ku4-modal is dismissed.
         */
        "focusTrap": string;
        /**
          * Visible when true
         */
        "visible": boolean;
    }
    interface Ku4Tab {
        /**
          * Connect this tab to a panel
          * @param panel - The target ku4-tab-panel HTMLElement
         */
        "connect": (panel: any) => Promise<void>;
        /**
          * Unset this tab as selected
         */
        "deselect": () => Promise<void>;
        /**
          * Set this tab as selected.
         */
        "select": () => Promise<void>;
        /**
          * Active when true
         */
        "selected": boolean;
    }
    interface Ku4TabList {
        /**
          * Open a ku4-tab in this ku4-tab-list.
          * @param tab - ku4-tab target to open.
         */
        "open": (tab: any) => Promise<this>;
    }
    interface Ku4TabPanel {
        /**
          * Connect this panel to a tab.
          * @param tab - Tab to connect to this panel
         */
        "connect": (tab: any) => Promise<void>;
        /**
          * Unset this panel as selected.
         */
        "deselect": () => Promise<void>;
        /**
          * Set this panel as selected.
         */
        "select": () => Promise<void>;
        /**
          * Set true to display panel
         */
        "selected": boolean;
    }
    interface Ku4Table {
        /**
          * The member to stack on at small views.
         */
        "stackSm": 'column' | 'row' | '';
        /**
          * The member to stack on at extra-small views.
         */
        "stackXs": 'column' | 'row' | '';
    }
    interface Ku4Tooltip {
        /**
          * Pin tooltip to bottom of target element
         */
        "bottom": boolean;
        /**
          * Query selector of element(s) to tie to this tooltip.
         */
        "element": string;
        /**
          * Hide tool tip.
         */
        "hide": () => Promise<void>;
        /**
          * Pin tooltip to left of target element
         */
        "left": boolean;
        /**
          * Pin tooltip to right of target element
         */
        "right": boolean;
        /**
          * Show tooltip on target element.
          * @param element - Element to show tooltip on
         */
        "show": (element: any) => Promise<void>;
        /**
          * Pin tooltip to top of target element
         */
        "top": boolean;
    }
    interface Ku4Validation {
        /**
          * querySelector for an element whose value this value should match. This is excellent for creating confirmation type validations, e.g. email confirmations or password confirmations. See the Preview in the ku4-form Docs and "Show code" for some examples of using this attribute.
         */
        "element": string;
        /**
          * Any RegExp flags that you want to include in your pattern. Multiple patterns can be passed delimited by a `space` character. e.g. using the pattern1 pattern2 pattern3 example from the `pattern` property, you could pass "gimsuy gim gi". If you wanted to pass flags only for patterns 1 and 3 you will just skip flags for pattern2 by typing nothing and instead typing another "space" e.g. "gimsuy  gi". If you wanted to skip flags for pattern1 you could start flags with a "space" e.g. " gim gi".
         */
        "flags": string;
        /**
          * The value of the id attribute of the field that this is the validation for.
         */
        "for": string;
        /**
          * Set to true to display as invalid
         */
        "invalid": boolean;
        /**
          * A reference to a named function or a function body that define a validation criteria and return `true` when the defined validation criteria are satisfied. The function will be called with one argument, `value`, that will contain the current value of the target field. Example: method="return value === 'valid'", or function validate(value) { return value === 'valid'; } method="validate(value)"
         */
        "method": string;
        /**
          * Validation RegExp pattern that the target field must match to be considered valid. Multiple patterns can be passed delimited by a `space` character. e.g. pattern1 pattern2 pattern3 etc. If your target field is optional you can accomplish this with your pattern using "(^$)|(YOUR-PATTERN)". This says that the field must be empty (^$) OR (YOUR-PATTERN).
         */
        "pattern": string;
        /**
          * Call to explicitly validate this validation. This method is called internally on change and blur of the input internally. There is no default need to call this method.
         */
        "validate": () => Promise<boolean>;
        /**
          * Comma delimited string of valid values. This attribute is great if your validation rules require some very specific set of valid values. An example may be if you have a select field where you would like to show all possible values but some you still want to be invalid.
         */
        "values": string;
    }
}
declare global {
    interface HTMLKu4CarouselElement extends Components.Ku4Carousel, HTMLStencilElement {
    }
    var HTMLKu4CarouselElement: {
        prototype: HTMLKu4CarouselElement;
        new (): HTMLKu4CarouselElement;
    };
    interface HTMLKu4CarouselSlideElement extends Components.Ku4CarouselSlide, HTMLStencilElement {
    }
    var HTMLKu4CarouselSlideElement: {
        prototype: HTMLKu4CarouselSlideElement;
        new (): HTMLKu4CarouselSlideElement;
    };
    interface HTMLKu4ColElement extends Components.Ku4Col, HTMLStencilElement {
    }
    var HTMLKu4ColElement: {
        prototype: HTMLKu4ColElement;
        new (): HTMLKu4ColElement;
    };
    interface HTMLKu4DrawerElement extends Components.Ku4Drawer, HTMLStencilElement {
    }
    var HTMLKu4DrawerElement: {
        prototype: HTMLKu4DrawerElement;
        new (): HTMLKu4DrawerElement;
    };
    interface HTMLKu4FocusTrapElement extends Components.Ku4FocusTrap, HTMLStencilElement {
    }
    var HTMLKu4FocusTrapElement: {
        prototype: HTMLKu4FocusTrapElement;
        new (): HTMLKu4FocusTrapElement;
    };
    interface HTMLKu4FormElement extends Components.Ku4Form, HTMLStencilElement {
    }
    var HTMLKu4FormElement: {
        prototype: HTMLKu4FormElement;
        new (): HTMLKu4FormElement;
    };
    interface HTMLKu4GridElement extends Components.Ku4Grid, HTMLStencilElement {
    }
    var HTMLKu4GridElement: {
        prototype: HTMLKu4GridElement;
        new (): HTMLKu4GridElement;
    };
    interface HTMLKu4LabelElement extends Components.Ku4Label, HTMLStencilElement {
    }
    var HTMLKu4LabelElement: {
        prototype: HTMLKu4LabelElement;
        new (): HTMLKu4LabelElement;
    };
    interface HTMLKu4MaskElement extends Components.Ku4Mask, HTMLStencilElement {
    }
    var HTMLKu4MaskElement: {
        prototype: HTMLKu4MaskElement;
        new (): HTMLKu4MaskElement;
    };
    interface HTMLKu4ModalElement extends Components.Ku4Modal, HTMLStencilElement {
    }
    var HTMLKu4ModalElement: {
        prototype: HTMLKu4ModalElement;
        new (): HTMLKu4ModalElement;
    };
    interface HTMLKu4TabElement extends Components.Ku4Tab, HTMLStencilElement {
    }
    var HTMLKu4TabElement: {
        prototype: HTMLKu4TabElement;
        new (): HTMLKu4TabElement;
    };
    interface HTMLKu4TabListElement extends Components.Ku4TabList, HTMLStencilElement {
    }
    var HTMLKu4TabListElement: {
        prototype: HTMLKu4TabListElement;
        new (): HTMLKu4TabListElement;
    };
    interface HTMLKu4TabPanelElement extends Components.Ku4TabPanel, HTMLStencilElement {
    }
    var HTMLKu4TabPanelElement: {
        prototype: HTMLKu4TabPanelElement;
        new (): HTMLKu4TabPanelElement;
    };
    interface HTMLKu4TableElement extends Components.Ku4Table, HTMLStencilElement {
    }
    var HTMLKu4TableElement: {
        prototype: HTMLKu4TableElement;
        new (): HTMLKu4TableElement;
    };
    interface HTMLKu4TooltipElement extends Components.Ku4Tooltip, HTMLStencilElement {
    }
    var HTMLKu4TooltipElement: {
        prototype: HTMLKu4TooltipElement;
        new (): HTMLKu4TooltipElement;
    };
    interface HTMLKu4ValidationElement extends Components.Ku4Validation, HTMLStencilElement {
    }
    var HTMLKu4ValidationElement: {
        prototype: HTMLKu4ValidationElement;
        new (): HTMLKu4ValidationElement;
    };
    interface HTMLElementTagNameMap {
        "ku4-carousel": HTMLKu4CarouselElement;
        "ku4-carousel-slide": HTMLKu4CarouselSlideElement;
        "ku4-col": HTMLKu4ColElement;
        "ku4-drawer": HTMLKu4DrawerElement;
        "ku4-focus-trap": HTMLKu4FocusTrapElement;
        "ku4-form": HTMLKu4FormElement;
        "ku4-grid": HTMLKu4GridElement;
        "ku4-label": HTMLKu4LabelElement;
        "ku4-mask": HTMLKu4MaskElement;
        "ku4-modal": HTMLKu4ModalElement;
        "ku4-tab": HTMLKu4TabElement;
        "ku4-tab-list": HTMLKu4TabListElement;
        "ku4-tab-panel": HTMLKu4TabPanelElement;
        "ku4-table": HTMLKu4TableElement;
        "ku4-tooltip": HTMLKu4TooltipElement;
        "ku4-validation": HTMLKu4ValidationElement;
    }
}
declare namespace LocalJSX {
    interface Ku4Carousel {
        /**
          * Sets the distance a touch must travel before activating a swipe.
         */
        "swipeTolerance"?: number;
    }
    interface Ku4CarouselSlide {
    }
    interface Ku4Col {
        /**
          * Order of column at large (optional).
         */
        "orderLg"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Order of column at medium (optional).
         */
        "orderMd"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Order of column at small (optional).
         */
        "orderSm"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Order of column at extra-small (optional).
         */
        "orderXs"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Number of columns to span left and right at large (optional).
         */
        "spanLg"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Number of columns to span left and right at medium (optional).
         */
        "spanMd"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Number of columns to span left and right at extra-small (optional).
         */
        "spanSm"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Number of columns to span left and right at extra-small (optional).
         */
        "spanXs"?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Start position of column at large (optional).
         */
        "startLg"?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Start position of column at medium (optional).
         */
        "startMd"?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Start position of column at small (optional).
         */
        "startSm"?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
        /**
          * Start position of column at extra-small (optional).
         */
        "startXs"?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;
    }
    interface Ku4Drawer {
        /**
          * Pin drawer to bottom
         */
        "bottom"?: boolean;
        /**
          * Pin drawer to left
         */
        "left"?: boolean;
        /**
          * Display drawer
         */
        "open"?: boolean;
        /**
          * Pin drawer to right
         */
        "right"?: boolean;
        /**
          * Open size of this drawer (any valid CSS width or height value)
         */
        "size"?: string;
        /**
          * Pin drawer to top
         */
        "top"?: boolean;
    }
    interface Ku4FocusTrap {
        /**
          * Focus trap will be active when true.
         */
        "active"?: boolean;
        /**
          * A querySelector of elements to explicitly exclude. This can be useful for greedy accessibility apis and screen reader fallover. Pass a comma delimited string of multiple selectors to target multiple exclusions.
         */
        "exclude"?: string;
        /**
          * A querySelector of shadow elements to explicitly exclude. This can be useful for greedy accessibility apis and screen reader fallover. Pass a comma delimited string of multiple selectors to target multiple exclusions. Pass selectors that starts with the target components host lightDom element E.g. `'ku4-carousel .next, ku4-carousel .prev'` will explicitly exclude the target ku4-carousel next and previous buttons from being navigable by greedy accessibility tools, i.e. VoiceOver.
         */
        "excludeShadow"?: string;
        /**
          * A querySelector of elements to include in the trap that are not children of this focus trap. This can be useful for specific situations such as modal overlays.
         */
        "include"?: string;
        /**
          * A querySelector of element to initially focus
         */
        "initial"?: string;
        /**
          * A querySelector of element to return focus to
         */
        "return"?: string;
    }
    interface Ku4Form {
        /**
          * Set to true to display as invalid
         */
        "invalid"?: boolean;
    }
    interface Ku4Grid {
        /**
          * Number of columns to render at large (optional).
         */
        "columnsLg"?: 1 | 2 | 3 | 4 | 6 | 8 | 12 | 16;
        /**
          * Number of columns to render at medium (optional).
         */
        "columnsMd"?: 1 | 2 | 3 | 4 | 6 | 8 | 12 | 16;
        /**
          * Number of columns to render at small (optional).
         */
        "columnsSm"?: 1 | 2 | 3 | 4 | 6 | 8 | 12 | 16;
        /**
          * Number of columns to render at extra-small (optional).
         */
        "columnsXs"?: 1 | 2 | 3 | 4 | 6 | 8 | 12 | 16;
        /**
          * Number of columns to offset at large (optional).
         */
        "offsetLeftLg"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left at medium (optional).
         */
        "offsetLeftMd"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left at small (optional).
         */
        "offsetLeftSm"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left at extra-small (optional).
         */
        "offsetLeftXs"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left and right at large (optional).
         */
        "offsetLg"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left and right at medium (optional).
         */
        "offsetMd"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset right (optional).
         */
        "offsetRight"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset right at large (optional).
         */
        "offsetRightLg"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset right at medium (optional).
         */
        "offsetRightMd"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset right at small (optional).
         */
        "offsetRightSm"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset at extra-small (optional).
         */
        "offsetRightXs"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left and right at small (optional).
         */
        "offsetSm"?: 0 | 1 | 2 | 3 | 4 | 5;
        /**
          * Number of columns to offset left and right at extra-small (optional).
         */
        "offsetXs"?: 0 | 1 | 2 | 3 | 4 | 5;
    }
    interface Ku4Label {
        /**
          * The value of the id attribute of the input that this is the label for.
         */
        "for"?: string;
        /**
          * Optional Label value. This value is driven by the input placeholder attribute by default.
         */
        "value"?: string;
    }
    interface Ku4Mask {
        /**
          * A regex of characters to ban from entry. A user will not be able to input any character in this set of characters. E.g. ban="[()-]" will not allow a user to input (, ), or - into the target input.
         */
        "ban"?: string;
        /**
          * Mask Character
         */
        "char"?: string;
        /**
          * Mask for input having id of value
         */
        "for"?: string;
        /**
          * Hide mask
         */
        "hidden"?: boolean;
        /**
          * A test pattern for the mask to allow or disallow characters at targeted points in the input. The pattern is a character separated value of regular expressions where the first character denotes the character separator at each subsequent value is a regular expression for the character at that indicated index. E.g. `pattern=",[345],,,[^abc]"` would mean that "," is the separator and that the first character must  be a 3, 4, or 5, and the fourth character cannot be an a, b or c.
         */
        "pattern"?: string;
        /**
          * Mask template
         */
        "template"?: string;
    }
    interface Ku4Modal {
        /**
          * An optional querySelector of an associated ku4-focus-trap that should be activated when this ku4-modal is displayed and deactivated when this ku4-modal is dismissed.
         */
        "focusTrap"?: string;
        /**
          * Event fired when modal is dismissed
         */
        "onKu4ModalDismiss"?: (event: CustomEvent<any>) => void;
        /**
          * Event fired when modal is displayed
         */
        "onKu4ModalDisplay"?: (event: CustomEvent<any>) => void;
        /**
          * Visible when true
         */
        "visible"?: boolean;
    }
    interface Ku4Tab {
        /**
          * Event fired when this tab is clicked.
         */
        "onKu4TabClick"?: (event: CustomEvent<any>) => void;
        /**
          * Event fired when this tab is keyup.
         */
        "onKu4TabKeyup"?: (event: CustomEvent<any>) => void;
        /**
          * Active when true
         */
        "selected"?: boolean;
    }
    interface Ku4TabList {
    }
    interface Ku4TabPanel {
        /**
          * Set true to display panel
         */
        "selected"?: boolean;
    }
    interface Ku4Table {
        /**
          * The member to stack on at small views.
         */
        "stackSm"?: 'column' | 'row' | '';
        /**
          * The member to stack on at extra-small views.
         */
        "stackXs"?: 'column' | 'row' | '';
    }
    interface Ku4Tooltip {
        /**
          * Pin tooltip to bottom of target element
         */
        "bottom"?: boolean;
        /**
          * Query selector of element(s) to tie to this tooltip.
         */
        "element"?: string;
        /**
          * Pin tooltip to left of target element
         */
        "left"?: boolean;
        /**
          * Pin tooltip to right of target element
         */
        "right"?: boolean;
        /**
          * Pin tooltip to top of target element
         */
        "top"?: boolean;
    }
    interface Ku4Validation {
        /**
          * querySelector for an element whose value this value should match. This is excellent for creating confirmation type validations, e.g. email confirmations or password confirmations. See the Preview in the ku4-form Docs and "Show code" for some examples of using this attribute.
         */
        "element"?: string;
        /**
          * Any RegExp flags that you want to include in your pattern. Multiple patterns can be passed delimited by a `space` character. e.g. using the pattern1 pattern2 pattern3 example from the `pattern` property, you could pass "gimsuy gim gi". If you wanted to pass flags only for patterns 1 and 3 you will just skip flags for pattern2 by typing nothing and instead typing another "space" e.g. "gimsuy  gi". If you wanted to skip flags for pattern1 you could start flags with a "space" e.g. " gim gi".
         */
        "flags"?: string;
        /**
          * The value of the id attribute of the field that this is the validation for.
         */
        "for"?: string;
        /**
          * Set to true to display as invalid
         */
        "invalid"?: boolean;
        /**
          * A reference to a named function or a function body that define a validation criteria and return `true` when the defined validation criteria are satisfied. The function will be called with one argument, `value`, that will contain the current value of the target field. Example: method="return value === 'valid'", or function validate(value) { return value === 'valid'; } method="validate(value)"
         */
        "method"?: string;
        /**
          * Event fired when this validation changes from invalid to valid.
         */
        "onKu4ValidationValidated"?: (event: CustomEvent<any>) => void;
        /**
          * Validation RegExp pattern that the target field must match to be considered valid. Multiple patterns can be passed delimited by a `space` character. e.g. pattern1 pattern2 pattern3 etc. If your target field is optional you can accomplish this with your pattern using "(^$)|(YOUR-PATTERN)". This says that the field must be empty (^$) OR (YOUR-PATTERN).
         */
        "pattern"?: string;
        /**
          * Comma delimited string of valid values. This attribute is great if your validation rules require some very specific set of valid values. An example may be if you have a select field where you would like to show all possible values but some you still want to be invalid.
         */
        "values"?: string;
    }
    interface IntrinsicElements {
        "ku4-carousel": Ku4Carousel;
        "ku4-carousel-slide": Ku4CarouselSlide;
        "ku4-col": Ku4Col;
        "ku4-drawer": Ku4Drawer;
        "ku4-focus-trap": Ku4FocusTrap;
        "ku4-form": Ku4Form;
        "ku4-grid": Ku4Grid;
        "ku4-label": Ku4Label;
        "ku4-mask": Ku4Mask;
        "ku4-modal": Ku4Modal;
        "ku4-tab": Ku4Tab;
        "ku4-tab-list": Ku4TabList;
        "ku4-tab-panel": Ku4TabPanel;
        "ku4-table": Ku4Table;
        "ku4-tooltip": Ku4Tooltip;
        "ku4-validation": Ku4Validation;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ku4-carousel": LocalJSX.Ku4Carousel & JSXBase.HTMLAttributes<HTMLKu4CarouselElement>;
            "ku4-carousel-slide": LocalJSX.Ku4CarouselSlide & JSXBase.HTMLAttributes<HTMLKu4CarouselSlideElement>;
            "ku4-col": LocalJSX.Ku4Col & JSXBase.HTMLAttributes<HTMLKu4ColElement>;
            "ku4-drawer": LocalJSX.Ku4Drawer & JSXBase.HTMLAttributes<HTMLKu4DrawerElement>;
            "ku4-focus-trap": LocalJSX.Ku4FocusTrap & JSXBase.HTMLAttributes<HTMLKu4FocusTrapElement>;
            "ku4-form": LocalJSX.Ku4Form & JSXBase.HTMLAttributes<HTMLKu4FormElement>;
            "ku4-grid": LocalJSX.Ku4Grid & JSXBase.HTMLAttributes<HTMLKu4GridElement>;
            "ku4-label": LocalJSX.Ku4Label & JSXBase.HTMLAttributes<HTMLKu4LabelElement>;
            "ku4-mask": LocalJSX.Ku4Mask & JSXBase.HTMLAttributes<HTMLKu4MaskElement>;
            "ku4-modal": LocalJSX.Ku4Modal & JSXBase.HTMLAttributes<HTMLKu4ModalElement>;
            "ku4-tab": LocalJSX.Ku4Tab & JSXBase.HTMLAttributes<HTMLKu4TabElement>;
            "ku4-tab-list": LocalJSX.Ku4TabList & JSXBase.HTMLAttributes<HTMLKu4TabListElement>;
            "ku4-tab-panel": LocalJSX.Ku4TabPanel & JSXBase.HTMLAttributes<HTMLKu4TabPanelElement>;
            "ku4-table": LocalJSX.Ku4Table & JSXBase.HTMLAttributes<HTMLKu4TableElement>;
            "ku4-tooltip": LocalJSX.Ku4Tooltip & JSXBase.HTMLAttributes<HTMLKu4TooltipElement>;
            "ku4-validation": LocalJSX.Ku4Validation & JSXBase.HTMLAttributes<HTMLKu4ValidationElement>;
        }
    }
}
